#!/usr/bin/env shlib

import system
import string

__expect_init()
{
	__expect_tmpdir=
	__expect_stdin=
	__expect_stdout=
	__expect_pid=0
	__expect_timer=0
	__expect_timeout_val=60
}
__expect_init

__expect_timeout()
{
	: "__expect_timeout(): $*"
	__expect_timeout_val="${1}"
}
alias expect.timeout='__expect_timeout '

__expect_session()
{
	: "__expect_session($*)"

	! test -d "${__expect_tmpdir}" || die 'expect session already started'
	__expect_tmpdir="$(system.mktempdir expect)"

	test -d "${__expect_tmpdir}" || die 'failed to make session tmp directory'
	__expect_stdin="${__expect_tmpdir}/input"
	__expect_stdout="${__expect_tmpdir}/output"
	shlib.atexit __expect_close
}

__expect_close()
{
	: "__expect_close(): $*"
	if test -e "${__expect_stdin}"; then
		! test -h "${__expect_stdin}" || exec 3>&-
		rm "${__expect_stdin}"
	fi
	if test -e "${__expect_stdout}"; then
		! test -h "${__expect_stdout}" || exec 4<&-
		rm "${__expect_stdout}"
	fi

	! test -f "${__expect_tmpdir}/pid" || rm "${__expect_tmpdir}/pid"
	! test -d "${__expect_tmpdir}" || rmdir "${__expect_tmpdir}"

	test "${__expect_pid}" -eq 0 || kill "${__expect_pid}" >/dev/null 2>&1
	test "${__expect_timer}" -eq 0 || kill "${__expect_timer}" >/dev/null 2>&1

	__expect_init
}
alias expect.close='__expect_close '

__expect_popen()
{
	: "__expect_popen(): $*"

	__expect_session || return

	system.mkfifo "${__expect_stdout}" || die 'expect.popen() failed to make stdout'
	system.mkfifo "${__expect_stdin}" || die 'expect.popen() failed to make stdin'

	(exec "$@" <> "${__expect_stdin}" > "${__expect_stdout}" 2>&1 ) &
	__expect_pid="$!"

	# FIXME this is not entirely portable to all OS's
	if (cd '/proc/' && test -d "${__expect_pid}"); then
		echo "${__expect_pid}" > "${__expect_tmpdir}/pid"
		exec 3>> "${__expect_stdin}"
		exec 4<> "${__expect_stdout}"
	fi
}
alias expect.popen='__expect_popen '

if shlib.hascmd ssh; then
	if shlib.hascmd socat; then
		__expect_open_ssh() { __expect_popen socat - "EXEC:'ssh ${@}',pty,setsid,ctty"; }
	else
		__expect_open_ssh() { __expect_popen ssh -tt "${@}"; }
	fi
elif shlib.hascmd dbclient; then
	if shlib.hascmd socat; then
		__expect_open_ssh() { __expect_popen socat - "EXEC:'dbclient ${@}',pty,setsid,ctty"; }
	else
		__expect_open_ssh() { __expect_popen dbclient -t "${@}"; }
	fi
else
	__expect_open_ssh() { die "ssh unavailable"; }
	error "no handler available for 'ssh'"
fi

if shlib.hascmd rsh; then
	if shlib.hascmd socat; then
		__expect_open_rsh() { __expect_popen socat - "EXEC:'rsh ${@}',pty,setsid,ctty"; }
	else
		__expect_open_rsh() { __expect_popen rsh "$@"; }
	fi
else
	__expect_open_rsh() { die "rsh unavable"; }
	error "no handler available for 'rsh'"
fi

if shlib.hascmd socat; then
	__expect_open_telnet_cmd() { __expect_popen socat - "TCP4:${1}:22"; }
elif shlib.hascmd netcat; then
	__expect_open_telnet_cmd() { __expect_popen netcat "${1}" 22; }
elif shlib.hascmd nc; then
	__expect_open_telnet_cmd() { __expect_popen nc "${1}" 22; }
elif shlib.hascmd telnet; then
	# Pointless to test for socat here to try to get sane pty
	# handling, so don't bother...
	__expect_open_telnet_cmd() { __expect_popen telnet "$@"; }
else
	error "no handler available for telnet"
	__expect_open_telnet_cmd() { die "telnet unavailable"; }
fi

__expect_open_telnet()
{
	: "__expect_open_telnet($@)"

	__expect_open_telnet_user="${1}"
	shift
	set -- "${__expect_open_telnet_user#*@}" "$@"
	__expect_open_telnet_user="${__expect_open_telnet_user%%@*}"

	__expect_open_telnet_cmd "$@"

	# FIXME find the login/username prompt and enter it?
}

__expect_open_file()
{
	: "__expect_open_file(): $*"

	__expect_session || return

	test -c "${1}" || die "expect.open() invalid file"
	test -w "${1}" || die "expect.open() write permission denied"
	test -r "${1}" || die "expect.open() read permission denied"

	ln -s "${__expect_stdin}" "${1}"
	exec 3>>"${__expect_stdin}"

	ln -s "${__expect_stdout}" "${1}"
	exec 4<>"${__expect_stdout}"
}

__expect_open()
{
	: "__expect_open($*)"

	__expect_open_proto="${1}"
	shift
	set -- "${__expect_open_proto#*://}"

	case "${__expect_open_proto}" in
	(ssh://*)	__expect_open_ssh "$@";;
	(rsh://*)	__expect_open_rsh "$@";;
	(telnet://*)	__expect_open_telnet "$@";;
	(file://*)	__expect_open_file "$@";;
	(*://)	error "Do not know how to handle '${__expect_open_proto%%://}://'"
		return 1;;
	(*)		__expect_open_file "$@";;
	esac
}
alias expect.open='__expect_open '

__expect_timedout() { false; }
alias expect.timedout='__expect_timedout '

# FIXME move timers to a timer library?
__expect_timer_start()
{
	: "__expect_timer_start(): $*"
	test "${__expect_timer}" -eq 0 || kill "${__expect_timer}" > /dev/null 2>&1
	__expect_timedout() { false; }
	trap '__expect_timedout() { true; }' ALRM

	/bin/sh -c "sleep ${__expect_timeout_val} > /dev/null 2>&1 && kill -ALRM $$ > /dev/null 2>&1" &
	__expect_timer="$!"
}

__expect_timer_stop()
{
	trap '' ALRM
	test "${__expect_timer}" -eq 0 || kill -9 "${__expect_timer}" > /dev/null 2>&1
	__expect_timer='0'
}

__expect_ready()
{
	case "${__expect_pid}" in
	(0)	! test -e "${__expect_stdin}" || return 0;;
	(*)	! (cd '/proc/' && test -d "${__expect_pid}") || return 0;;
	esac

	error 'expect not ready'
	return 1
}

__expect_write()
{
	: "__expect_write(): $*"
	__expect_ready || return 1
	(printf '%s\r\n' "$*" >&3) &
}
alias expect.write='__expect_write '

__expect_read()
{
	: "__expect_read(): $*"

	__expect_ready || return 1
	__expect_timer_start
	if read __expect_read_val <&4; then
		__expect_timer_stop
		return 0
	fi
	__expect_timer_stop
	return 1
}
alias expect.read='__expect_read '

__expect_line()
{
	: "__expect_line(): $*"
	string.sub '\r' '' "${__expect_read_val}"
}
alias expect.line='__expect_line '

__expect_regexp()
{
	: "__expect_regexp(): $*"
	while __expect_read; do
		if string.regexp "${1}" "$(__expect_line)"; then
			return 0
		fi
	done
	return 1
}
alias expect.regexp='__expect_regexp '

shlib.main {
	for arg; do
		case "${arg}" in (-h|-help) string.doc 'expect';; esac
	done

	__expect_popen "$@"

	while __expect_read; do
		__expect_line
	done
}

# vim: filetype=sh
