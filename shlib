#!/bin/sh
# We always use 'set -e' because it works "as expected" on the vast majority of
# POSIX shells out there .. BASH being the only exception. That said, it hurts
# nothing to use 'set -e' and then ignore its existance.
set -e

SHLIB_ONLY='false'
# BusyBox may have builtins which can prevent 'command -v' from returning the
# expected output, this can be detected by asking 'command -v' for the path to
# 'sh', which in busybox returns as 'sh'.
if test "$(command -v sh)" = 'sh'; then
	__shlib_hascmd() { ! "${SHLIB_ONLY}" || return 1;test -e "$(which "${1}")" > /dev/null 2>&1; }
	__shlib_pathcmd() { __shlib_hascmd "${1}" && which "${1}"; }
else
	__shlib_hascmd() { ! "${SHLIB_ONLY}" || return 1;test -e "$(command -v "${1}")" > /dev/null 2>&1; }
	__shlib_pathcmd() { __shlib_hascmd "${1}" && command -v "${1}"; }
fi

# Allow 'readonly' to work, even if it wont do what we want
if ! __shlib_hascmd readonly > /dev/null 2>&1; then alias readonly=' ';fi

# Find the shell-flavor we are using
if ! ${ZSH_VERSION+false}; then
	readonly SHLIB_SHELL='zsh'
	emulate ksh
	zmodload zsh/mathfunc
elif ! ${KSH_VERSION+false}; then
	readonly SHLIB_SHELL='ksh'
	alias type > /dev/null 2>&1 || alias type='whence -v '
elif ! ${BASH_VERSION+false}; then
	readonly SHLIB_SHELL='bash'
else
	readonly SHLIB_SHELL='sh'
fi

# Always request the shell obey POSIX
readonly POSIXLY_CORRECT=posix

##
# It tends to be faster to call these as functions vs searching the PATH and
# then fork/exec'ing them.  On the flip side, we only supply very low-level
# routines as part of the core shlib.  Everything else MUST be supplied via
# 'import' libraries.
if ! __shlib_hascmd let; then let() { for __let_expression; do command eval test '$((${__let_expression}))' -ne 0;done; } fi
dirname()
{
	case "${1}" in (.*);; (/*);; (*) set -- "./${1}";; esac
	set -- "${1%/*}"
	test -z "${1}" && set -- '/'
	echo "${1}"
}
basename()
{
	set -- "${1%/}"
	set -- "${1##*/}"
	test -z "${1}" && set -- '/'
	echo "${1}"
}

##
# shlib library routines

# These where defined earlier
alias hascmd='__shlib_hascmd '
alias shlib.hascmd='__shlib_hascmd '
alias shlib.pathcmd='__shlib_pathcmd '

# the compliment to hascmd
__shlib_hasfunc() { type "${1}"|grep -q 'function$'; }
alias shlib.hasfunc='__shlib_hasfunc '

# FIXME this is not remotely portable, and it beaks our coding style guidelines
if pwd -P > /dev/null 2>&1; then
	__shlib_realpath_pwd() {( cd "${1}" >/dev/null 2>&1 && echo "$(pwd -P)/${2}"; )}
else
	__shlib_realpath_pwd() {( cd "${1}" >/dev/null 2>&1 && echo "$(pwd)/${2}"; )}
fi
__shlib_realpath() {
	if ! test -d "${1}"; then
		set -- "$(dirname "${1}")" "$(basename "${1}")"
	fi
	__shlib_realpath_pwd "${@}"
}
alias shlib.realpath='__shlib_realpath '

__shlib_optarg()
{
	if test "${1#*=}" != "${1}"; then
		set -- "${1}" "${2}" "${1#*=}"
	else
		case "${2}" in (-*);; (*) set -- "${1}" "${2}" "${2}";; esac
		OPTIND="$((${OPTIND} + 1))"
	fi
	test -z "${3}" || echo "${3}"
}
alias shlib.optarg='__shlib_optarg '

__shlib_getarg()
{
	set -- "${1}" "${2}" "$(__shlib_optarg "${@}")"
	if test -z "${3}"; then
		__shlib_usage 'shlib' "option '${1%=*}' requires an argument"
	fi
	echo "${3}"
}
alias shlib.getarg='__shlib_getarg '


__shlib_error() { echo "error: $*" >&2; }
alias shlib.error='__shlib_error '
alias error='__shlib_error '

__shlib_die() { error "$*"; exit 1; }
alias shlib.die='__shlib_die '
alias die='__shlib_die '

__shlib_exit()
{
	set -- ${__shlib_atexit_funcs}
	unset __shlib_atexit_funcs
	while test "$#" -gt '0'; do
		"${1}"
		shift
	done
}
__shlib_atexit()
{
	if ! type "${1}" | grep -q 'function$'; then
		trap '' 0
		die "not a function '${1}'"
	fi
	__shlib_atexit_funcs="$1 ${__shlib_atexit_funcs}"
	trap __shlib_exit 0
}
alias shlib.atexit='__shlib_atexit '

__shlib_leaked_vars_filter()
{
	for __shlib_leaked_sh_var; do
		case "${__shlib_leaked_sh_var}" in
		(POSIXLY_CORRECT) continue;;
		(SHLIB_CALL_STACK) continue;;
		(SHLIB_SHELL)	continue;;
		(SHLIB_ONLY)	continue;;
		(OPTARG)	continue;; # zsh
		(A__z)		continue;; # ksh

		# bash
		(BASH_EXECUTION_STRING|FUNCNAME|PIPESTATUS) continue;;
		esac
		echo "${__shlib_leaked_sh_var}"
	done
	unset __shlib_leaked_sh_var
}
__shlib_leaked_vars()
{
	shift $#
	set -- $(__shlib_leaked_vars_filter $( ("${SHLIB_SHELL}" -c 'set';set;env)|sed -n 's/=.*//p'|sort|uniq -u))
	unset __shlib_leaked_shell_vars
	if test "$#" -ne '0'; then
		echo "## SHLIB SET VARIABLES: $#"
		for __shlib_leaked_var; do
			echo "${__shlib_leaked_var}"
		done
		unset __shlib_leaked_var
	fi
}

__shlib_lib_resolv()
{
	if test "${1%.*}" != "${1}"; then
		__shlib_lib_resolv_lib="${1%.*}/${1##*.}"
	else
		__shlib_lib_resolv_lib="${1}"
	fi
	__shlib_lib_resolv_ifs="${IFS}"
	IFS=':'
	set -- ${SHLIB_PATH}
	IFS="${__shlib_lib_resolv_ifs}"
	unset __shlib_lib_resolv_ifs

	__shlib_lib_resolv_file=
	for __shlib_lib_resolv_path; do
		if test -f "${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}.shlib"; then
			__shlib_lib_resolv_file="${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}.shlib"
		fi

		if test -e "${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}/__init__.shlib"; then
			__shlib_lib_resolv_file="${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}/__init__.shlib"
		fi
		if ! test -z "${__shlib_lib_resolv_file}"; then
			__shlib_realpath "${__shlib_lib_resolv_file}"
			break
		fi
	done
	unset __shlib_lib_resolv_path
	unset __shlib_lib_resolv_lib
	unset __shlib_lib_resolv_file
}

__shlib_valid() { ! test -z "$(__shlib_lib_resolv "${1}")" || return 1; return 0; }

__shlib_doc_resolv()
{
	case "${1}" in
	(shlib)		set -- 'doc';;
	(shlib.*)	set -- "doc.${1#*.}";;
	esac
	if test "${1%.*}" != "${1}"; then
		__shlib_doc_resolv_lib="${1%.*}/${1##*.}"
	else
		__shlib_doc_resolv_lib="${1}"
	fi
	__shlib_doc_resolv_ifs="${IFS}"
	IFS=':'
	set -- ${SHLIB_PATH}
	IFS="${__shlib_doc_resolv_ifs}"
	unset __shlib_doc_resolv_ifs

	__shlib_doc_resolv_file=
	for __shlib_doc_resolv_path; do
		if test -f "${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}.md"; then
			__shlib_doc_resolv_file="${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}.md"
		fi

		if test -e "${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}/__index__.md"; then
			__shlib_doc_resolv_file="${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}/__index__.md"
		fi
		if ! test -z "${__shlib_doc_resolv_file}"; then
			__shlib_realpath "${__shlib_doc_resolv_file}"
			break
		fi
	done
	unset __shlib_doc_resolv_path
	unset __shlib_doc_resolv_lib
	unset __shlib_doc_resolv_file
}
__shlib_doc()
{
	set -- "${1}" "${1%.*}" "${1##*.}" "$(__shlib_doc_resolv "${1}")"
	test -e "${4}" || die "no documentation for '${1}'"

	if test -e "${4}"; then
		sed \
			-e '/^[[[]/d;/```sh/d;/```/d;s/`//g' \
			-e 's/[[]\([^]]\{1,\}\)[]][(][^)]*[)]/\1/g' \
			-e 's/[[]\([^]]\{1,\}\)[]][[][^]]*[]]/\1/g' \
			"${4%}"
	fi

	exit 0
}
alias shlib.doc='__shlib_doc '

__shlib_imported()
{
	: "__shlib_imported($#): $*"
	__shlib_imported_lib="$(printf '%s' "$1"|tr '[/.]' '_')"
	shift
	set -- "${__shlib_imported_lib}" "$@"
	unset __shlib_imported_lib
	: "__shlib_imported($#): $*"

	case "$#" in
	(1)	"__shlib_${1}_imported" > /dev/null 2>&1 || return 1;;
	(2)	eval "__shlib_${1}_imported() { :; }";;
	(*)	return 1;;
	esac

	# We only get this far if $# == 2
	eval "__shlib_imports() { echo '$(__shlib_imports) ${1}'; }"
	return 0
}

__shlib_import_lib()
{
	if ! __shlib_valid "${1}"; then
		die "invalid library '${1}'"
	fi

	# name file
	set -- "${1}" "$(__shlib_lib_resolv "${1}")"

	# Only allow a library to be imported once per-scope
	! __shlib_imported "${1}" || return 0

	# name file opwd
	set -- "${1}" "${2}" "${PWD}"
	cd "$(dirname "${2}")"

	# name file opwd old_stack
	set -- "${1}" "${2}" "${3}" "${SHLIB_CALL_STACK}"
	SHLIB_CALL_STACK="${SHLIB_CALL_STACK} ${1}"
	__shlib_imported "${1}" "${2}"
	. "${2}"
	SHLIB_CALL_STACK="${4}"

	cd "${3}"
}

# FIXME support 'import <routine> from <lib>'?
__shlib_import()
{
	for __shlib_import_arg; do
		if ! eval "${__shlib_import_arg}_imported" 2>/dev/null; then
			__shlib_import_lib "${__shlib_import_arg}"
		fi
	done
	unset __shlib_import_arg

}
alias shlib.import='__shlib_import '
alias import='__shlib_import '

##
# These routines are pretty shlib specific.
alias shlib.main="! test \"\${SHLIB_CALL_STACK}\" = '__main__' || "

__shlib_version() { echo 0.01; }
__shlib_usage()
{
	if test "$#" -gt '0'; then
		error "${2}"
		echo "try '${1} --help'" >&2
		exit 1
	fi
	sed -e 's/	//' << EOF
	usage: shlib [options] [file]

	 options:
	   -L, --libdir=LIBDIR		Path to SHLIB libraries
	   -I, --import=LIB		Import specified lib(s)
	   -v, --verbose		Enable verbose execution
	   -V, --version		Display shlib version
	   -h, --help			Display this help

	 shell opts:
	   -c STRING			Execute commands given in STRING
	   -x				Trace script execution
	   --shlib-only			Only use shlib versions of commands
	   --report-set			Report set non-environ variables at termination

EOF
	exit 0
}
alias shlib.usage='__shlib_usage '

# If we were not "installed" then this variable will not have been
# substituted, and the libexecdir in which we find the 'shlib' front-end will
# not exist at which point we expect libdir to be relative to ${0}.
# e.g. <path to shlib>/shlib, <path to shlib>/.
# Alternatively, an environment may set the SHLIB_PATH to place shlib in
# disparate locations.
# e.g. SHLIB_PATH="${TOPDIR}/utils/shlib/libexec" while 'shlib' exists as a
# symlink in "${TOPDIR}/bin/shlib"
if test -z "${SHLIB_PATH}"; then
	SHLIB_PATH="@shlib_libexecdir@"
	if ! test -d "${SHLIB_PATH}" && test -d "${0%/*}"; then
		SHLIB_PATH="$(__shlib_realpath "${0%/*}")"
		readonly SHLIB_PATH="${SHLIB_PATH%/}"
	fi
	export SHLIB_PATH

	# Note: Checking for library validity is done at import(), this allows
	# setting SHLIB_PATH dynamically at runtime.
fi

# If our basename is 'shlib' then we are the master program, else we are likely
# being 'sourced' by some other script which wants to utilize shlib as a
# library.
if test "$(basename "${0}")" = 'shlib'; then
	SHLIB_IMPORTS=
	SHLIB_COMMAND=
	while getopts ':h:VL:I:vxc:' __shlib_arg; do
		case "${__shlib_arg}" in
		##
		# If we are here then everyting went as expected and all
		# arguments to options have been supplied and the world is
		# beautiful
		(h)	__shlib_doc "${OPTARG}";;
		(V)	echo "shlib version $(__shlib_version)"; exit 0;;
		(L)	test -e "${OPTARG}" || die "no such directory '${OPTARG}'"
			test -d "${OPTARG}" || die "not a directory '${OPTARG}'"
			SHLIB_PATH="${OPTARG}:${SHLIB_PATH}";;
		(I)	SHLIB_IMPORTS="${SHLIB_IMPORTS} ${OPTARG}";;

		# Support some traditional sh arguments.
		(v)	set -v;;
		(x)	set -x;;
		(c)	test -z "${SHLIB_COMMAND}" ||
				__shlib_usage 'shlib' "option '${1}' already specified"
			SHLIB_COMMAND="${OPTARG}";;

		# Missing optional arguments
		(:)	case "${OPTARG}" in
			(h) __shlib_usage;; # -h's argument is optional
			(*) __shlib_usage 'shlib' "option '-${OPTARG}' requires an argument";;
			esac;;

		## Long Argument handling
		# POSIX: Each time it is invoked, the getopts utility shall
		# place the value of the next option in the shell variable
		# specified by the 'name' operand and the index of the next
		# argument to be processed in the shell variable OPTIND.
		#
		# NOTE - During error handling Bash and Zsh "appear" to point
		# OPTIND at the argument that had the error, a behavior not
		# decribed by POSIX.
		(\?)	: "extended options: index=${OPTIND}, arg='${__shlib_arg}', optarg='${OPTARG}'"
			case "${SHLIB_SHELL}" in
			(zsh|bash)	shift $((${OPTIND} - 1));;
			(*)		shift $((${OPTIND} - 2));;
			esac
			OPTIND=1
			: "extended arg: '${1}'"

			case "${1}" in
			(--help)
				OPTARG="$(__shlib_optarg "${1}" "${2}")"
				test -z "${OPTARG}" || __shlib_doc "${OPTARG}"
				__shlib_usage;;

			(--libdir|--libdir=*)
				OPTARG="$(__shlib_getarg "${1}" "${2}")"
				test -e "${OPTARG}" || die "no such directory '${OPTARG}'"
				test -d "${OPTARG}" || die "not a directory '${OPTARG}'"
				SHLIB_PATH="${OPTARG}:${SHLIB_PATH}";;

			(--import|--import=*)
				SHLIB_IMPORTS="${SHLIB_IMPORTS} $(__shlib_getarg "${1}" "${2}")";;

			(--shlib-only)
				readonly SHLIB_ONLY=true;;

			(--report-set)
				readonly SHLIB_REPORT_SET=true;;

			##
			# Our standard argument handling
			(--)	OPTIND="$((${OPTIND} + 1))"; break;;
			(-*)	__shlib_usage 'shlib' "unknown option '${1}'";;
			(*)	break;;
			esac

			shift ${OPTIND}
			OPTIND=1;;
		esac
	done
	unset __shlib_arg
	shift $((${OPTIND} - 1))
	OPTIND=1
	unset OPTARG

	# Register the leak detector first so that it is called last.
	__shlib_atexit_funcs=
	${SHLIB_REPORT_SET+false} || __shlib_atexit __shlib_leaked_vars
	unset SHLIB_REPORT_SET

	# Initialize shlib
	eval '__shlib_imports() { :; }'
	for __shlib_lib_to_import in ${SHLIB_IMPORTS}; do
		import "${__shlib_lib_to_import}"
	done
	unset SHLIB_IMPORTS
	unset -f __shlib_version

	# FIXME write SHLIB_COMMAND to a temp SHLIB_SCRIPT to avoid the use of 'eval'
	if ! test -z "${SHLIB_COMMAND}"; then
		SHLIB_CALL_STACK='__main__' eval "${SHLIB_COMMAND}"
	else # We are being "executed", so lets check our argument list.
		test "$#" -ne '0' || die 'no script specified'
		test -f "$(__shlib_realpath "${1}")" || die "file does not exist '${1}'"

		PROGNAME="$(basename "${1}")"
		SHLIB_SCRIPT="${1}"
		SHLIB_IMPORT_FILE="${SHLIB_SCRIPT}"
		SHLIB_IMPORT_DIR="$(dirname ${SHLIB_SCRIPT})"
		SHLIB_IMPORT_PWD="${PWD}"
		shift

		SHLIB_CALL_STACK='__main__' . "${SHLIB_SCRIPT}"
	fi
fi
