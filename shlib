#!/bin/sh
# We always use 'set -e' because it works "as expected" on the vast majority of
# POSIX shells out there .. BASH being the only exception. That said, it hurts
# nothing to use 'set -e' and then ignore its existance.
set -e

SHLIB_ONLY='false'
# BusyBox may have builtins which can prevent 'command -v' from returning the
# expected output, this can be detected by asking 'command -v' for the path to
# 'sh', which in busybox returns as 'sh'.
if test "$(command -v sh)" = 'sh'; then
	hascmd() { ! "${SHLIB_ONLY}" || return 1;test -e "`which "${1}"`" > /dev/null 2>&1; }
	pathcmd() { hascmd "${1}" && which "${1}"; }
else
	hascmd() { ! "${SHLIB_ONLY}" || return 1;test -e "`command -v "${1}"`" > /dev/null 2>&1; }
	pathcmd() { hascmd "${1}" && command -v "${1}"; }
fi

# Allow 'readonly' to work, even if it wont do what we want
if ! hascmd readonly > /dev/null 2>&1; then alias readonly=' ';fi

# Find the shell-flavor we are using
if ! ${ZSH_VERSION+false}; then
	readonly SHLIB_SHELL='zsh'
	emulate ksh
	zmodload zsh/mathfunc
elif ! ${KSH_VERSION+false}; then
	readonly SHLIB_SHELL='ksh'
	alias type > /dev/null 2>&1 || alias type='whence -v '
elif ! ${BASH_VERSION+false}; then
	readonly SHLIB_SHELL='bash'
else
	readonly SHLIB_SHELL='sh'
fi

# Always request the shell obey POSIX
readonly POSIXLY_CORRECT=posix

##
# It tends to be faster to call these as functions vs searching the PATH and
# then fork/exec'ing them.  On the flip side, we only supply very low-level
# routines as part of the core shlib.  Everything else MUST be supplied via
# 'import' libraries.
if ! hascmd let; then let() { for __let_expression; do command eval test '$((${__let_expression}))' -ne 0;done; } fi
dirname()
{
	case "${1}" in (.*);; (/*);; (*) set -- "./${1}";; esac
	set -- "${1%/*}"
	test -z "${1}" && set -- '/'
	echo "${1}"
}
basename()
{
	set -- "${1%/}"
	set -- "${1##*/}"
	test -z "${1}" && set -- '/'
	echo "${1}"
}

##
# shlib library routines

# FIXME this is not remotely portable, and it beaks our coding style guidelines
__shlib_realpath()
{(
	if ! test -d "${1}"; then
		set -- "`dirname "${1}"`" "`basename "${1}"`"
	fi
	cd "${1}"
	if pwd -P > /dev/null 2>&1; then
		echo "`pwd -P`/${2}"
	else
		echo "`pwd`/${2}"
	fi
)}
alias shlib.realpath='__shlib_realpath '

__shlib_optarg()
{
	if test "${1#*=}" != "${1}"; then
		set -- "${1}" "${2}" "${1#*=}"
	else
		case "${2}" in (-*);; (*) set -- "${1}" "${2}" "${2}";; esac
	fi
	test -z "${3}" || echo "${3}"
}
alias shlib.optarg='__shlib_optarg '

__shlib_getarg()
{
	set -- "${1}" "${2}" "$(__shlib_optarg "${@}")"
	if test -z "${3}"; then
		__shlib_usage 'shlib' "option '${1%=*}' requires an argument"
	fi
	echo "${3}"
}
alias shlib.getarg='__shlib_getarg '


__shlib_error() { echo "error: $*" >&2; }
alias shlib.error='__shlib_error '
alias error='__shlib_error '

__shlib_die() { error "$*"; exit 1; }
alias shlib.die='__shlib_die '
alias die='__shlib_die '


__shlib_lib_resolv()
{
	if test "${1%.*}" != "${1}"; then
		__shlib_lib_resolv_lib="${1%.*}/${1##*.}"
	else
		__shlib_lib_resolv_lib="${1}"
	fi
	__shlib_lib_resolv_ifs="${IFS}"
	IFS=':'
	set -- ${SHLIB_PATH}
	IFS="${__shlib_lib_resolv_ifs}"
	unset __shlib_lib_resolv_ifs

	__shlib_lib_resolv_file=
	for __shlib_lib_resolv_path; do
		if test -f "${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}.shlib"; then
			__shlib_lib_resolv_file="${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}.shlib"
		fi

		if test -e "${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}/__init__.shlib"; then
			__shlib_lib_resolv_file="${__shlib_lib_resolv_path}/${__shlib_lib_resolv_lib}/__init__.shlib"
		fi
		if ! test -z "${__shlib_lib_resolv_file}"; then
			__shlib_realpath "${__shlib_lib_resolv_file}"
			break
		fi
	done
	unset __shlib_lib_resolv_path
	unset __shlib_lib_resolv_lib
	unset __shlib_lib_resolv_file
}

__shlib_valid() { ! test -z "$(__shlib_lib_resolv "${1}")" || return 1; return 0; }

__shlib_doc_resolv()
{
	if test "${1%.*}" != "${1}"; then
		__shlib_doc_resolv_lib="${1%.*}/${1##*.}"
	else
		__shlib_doc_resolv_lib="${1}"
	fi
	__shlib_doc_resolv_ifs="${IFS}"
	IFS=':'
	set -- ${SHLIB_PATH}
	IFS="${__shlib_doc_resolv_ifs}"
	unset __shlib_doc_resolv_ifs

	__shlib_doc_resolv_file=
	for __shlib_doc_resolv_path; do
		if test -f "${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}.md"; then
			__shlib_doc_resolv_file="${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}.md"
		fi

		if test -e "${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}/__index__.md"; then
			__shlib_doc_resolv_file="${__shlib_doc_resolv_path}/${__shlib_doc_resolv_lib}/__index__.md"
		fi
		if ! test -z "${__shlib_doc_resolv_file}"; then
			__shlib_realpath "${__shlib_doc_resolv_file}"
			break
		fi
	done
	unset __shlib_doc_resolv_path
	unset __shlib_doc_resolv_lib
	unset __shlib_doc_resolv_file
}
__shlib_doc()
{
	set -- "${1}" "${1%.*}" "${1##*.}" "$(__shlib_doc_resolv "${1}")"
	if test "${2}" != "${3}"; then
		test -e "${4}" || die "no documentation for '${1}'"
	fi

	if test -e "${4}"; then
		sed \
			-e '/^[[[]/d;/```sh/d;/```/d' \
			-e 's/[[]\([^]]\{1,\}\)[]][(][^)]*[)]/\1/g' \
			-e 's/[[]\([^]]\{1,\}\)[]][[][^]]*[]]/\1/g' \
			"${4%}"
	fi

	exit 0
}

__shlib_imported()
{
	: "__shlib_imported($#): $*"
	__shlib_imported_lib="$(printf '%s' "$1"|tr '[/.]' '_')"
	shift
	set -- "${__shlib_imported_lib}" "$@"
	unset __shlib_imported_lib
	: "__shlib_imported($#): $*"

	case "$#" in
	(1)	"__shlib_${1}_imported" > /dev/null 2>&1 || return 1;;
	(2)	eval "__shlib_${1}_imported() { :; }";;
	(*)	return 1;;
	esac

	# We only get this far if $# == 2
	eval "__shlib_imports() { echo '$(__shlib_imports) ${1}'; }"
	return 0
}

__shlib_import_lib()
{
	if ! __shlib_valid "${1}"; then
		die "invalid library '${1}'"
	fi

	# name file
	set -- "${1}" "$(__shlib_lib_resolv "${1}")"

	# Only allow a library to be imported once per-scope
	! __shlib_imported "${1}" || return 0

	# name file opwd
	set -- "${1}" "${2}" "${PWD}"
	cd "$(dirname "${2}")"

	# name file opwd old_stack
	set -- "${1}" "${2}" "${3}" "${SHLIB_CALL_STACK}"
	SHLIB_CALL_STACK="${SHLIB_CALL_STACK} ${1}"
	__shlib_imported "${1}" "${2}"
	. "${2}"
	SHLIB_CALL_STACK="${4}"

	cd "${3}"
}

# FIXME support 'import <routine> from <lib>'?
__shlib_import()
{
	for __shlib_import_arg; do
		if ! eval "${__shlib_import_arg}_imported" 2>/dev/null; then
			__shlib_import_lib "${__shlib_import_arg}"
		fi
	done
	unset __shlib_import_arg

}
alias shlib.import='__shlib_import '
alias import='__shlib_import '

##
# These routines are pretty shlib specific.
alias shlib.main="! test \"\${SHLIB_CALL_STACK}\" = '__main__' || "
alias shlib.hascmd='hascmd '
alias shlib.pathcmd='pathcmd '

__shlib_version() { echo 0.01; }
__shlib_usage()
{
	if test "$#" -gt '0'; then
		error "${2}"
		echo "try '${1} --help'" >&2
		exit 1
	fi
	sed -e 's/	//' << EOF
	usage: shlib [options] [file]

	 options:
	   -L, --libdir=LIBDIR		Path to SHLIB libraries
	   -I, --import=LIB		Import specified lib(s)
	   -v, --verbose		Enable verbose execution
	   -V, --version		Display shlib version
	   -h, --help			Display this help

	 shell opts:
	   -c STRING			Execute commands given in STRING
	   -x				Trace script execution
	   --shlib-only			Only use shlib versions of commands

EOF
	exit 0
}

# If we were not "installed" then this variable will not have been
# substituted, and the libexecdir in which we find the 'shlib' front-end will
# not exist at which point we expect libdir to be relative to ${0}.
# e.g. <path to shlib>/shlib, <path to shlib>/libexec/.
# Alternatively, an environment may set the SHLIB_PATH to place shlib in
# disparate locations.
# e.g. SHLIB_PATH="${TOPDIR}/utils/shlib/libexec" while 'shlib' exists as a
# symlink in "${TOPDIR}/bin/shlib"
if test -z "${SHLIB_PATH}"; then
	SHLIB_PATH="@shlib_libexecdir@"
	if ! test -d "${SHLIB_PATH}" && test -d "${0%/*}/libexec"; then
		SHLIB_PATH="$(__shlib_realpath "${0%/*}/libexec")"
		readonly SHLIB_PATH="${SHLIB_PATH%/}"
	fi

	# Note: Checking for library validity is done at import(), this allows
	# setting SHLIB_PATH dynamically at runtime.
fi

# If our basename is 'shlib' then we are the master program, else we are likely
# being 'sourced' by some other script which wants to utilize shlib as a
# library.
if test "`basename "${0}"`" = 'shlib'; then
	SHLIB_IMPORTS=
	SHLIB_COMMAND=
	while test "$#" -gt '0'; do
		case "${1}" in
		(-h|-help|--help)
			shlib_arg="$(__shlib_optarg "${1}" "${2}")"
			test -z "${shlib_arg}" || __shlib_doc "${shlib_arg}"
			__shlib_usage;;
		(-V|-version|--version)
			echo "shlib version `shlib_version`"; exit 0;;

		(-L|-libdir|--libdir|--libdir=*)
			shlib_arg="$(__shlib_getarg "${1}" "${2}")"
			test -e "${shlib_arg}" || die "no such directory '${shlib_arg}'"
			test -d "${shlib_arg}" || die "not a directory '${shlib_arg}'"
			SHLIB_PATH="${shlib_arg}:${SHLIB_PATH}"
			unset shlib_arg
			case "${1}" in (*=*);;(*) shift;;esac;;

		(-I|--import|--import=*)
			SHLIB_IMPORTS="${SHLIB_IMPORTS} $(__shlib_getarg "${1}" "${2}")"
			case "${1}" in (*=*);;(*) shift;;esac;;

		(--shlib-only)
			readonly SHLIB_ONLY=true;;

		# Support some traditional sh arguments.
		(-v)	set -v;;
		(-x)	set -x;;
		(-c)	test "$#" -gt '1' || \
				__shlib_usage 'shlib' "option '${1}' requires an argument"
			test -z "${SHLIB_COMMAND}" ||
				__shlib_usage 'shlib' "option '${1}' already specified"
			SHLIB_COMMAND="${2}"
			shift;;

		# Our standard argument handling
		(--)	shift; break;;
		(-*)	__shlib_usage 'shlib' "unknown option '${1}'";;
		(*)	break;;
		esac
		shift
	done

	# Initialize shlib
	eval '__shlib_imports() { :; }'
	for shlib_lib_to_import in ${SHLIB_IMPORTS}; do
		import "${shlib_lib_to_import}"
	done
	unset -f __shlib_doc_resolv
	unset -f __shlib_doc
	unset -f __shlib_version
	unset -f __shlib_usage

	# FIXME write SHLIB_COMMAND to a temp SHLIB_SCRIPT to avoid the use of 'eval'
	if ! test -z "${SHLIB_COMMAND}"; then
		SHLIB_CALL_STACK='__main__' eval "${SHLIB_COMMAND}"
	else # We are being "executed", so lets check our argument list.
		test "$#" -ne '0' || die 'no script specified'
		test -f "$(__shlib_realpath "${1}")" || die "file does not exist '${1}'"

		PROGNAME="`basename "${1}"`"
		SHLIB_SCRIPT="${1}"
		SHLIB_IMPORT_FILE="${SHLIB_SCRIPT}"
		SHLIB_IMPORT_DIR="$(dirname ${SHLIB_SCRIPT})"
		SHLIB_IMPORT_PWD="${PWD}"
		shift

		SHLIB_CALL_STACK='__main__' . "${SHLIB_SCRIPT}"
	fi
fi
