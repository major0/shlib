#!/usr/bin/env shlib

if test "${SHLIB_SHELL}" = 'ksh' && shlib.hasfunc .sh.math.cos; then
	__shlib_math_cos_cmd() { printf '%0.5f\n' "$((cos($*)))"; }
elif test "${SHLIB_SHELL}" = 'zsh'; then
	__shlib_math_cos_cmd() { set -- "$((cos($*)))"; printf '%0.5f\n' "${1%.}"; }
elif shlib.hascmd 'gawk'; then
	__shlib_math_cos_cmd() { command gawk "BEGIN{ print cos($*); }"; }
elif shlib.hascmd 'awk'; then
	__shlib_math_cos_cmd() { command awk "BEGIN{ print cos($*); }"; }
elif shlib.hascmd 'ksh' && ksh -c 'whence -t .sh.math.cos' > /dev/null 2>&1; then
	__shlib_math_cos_cmd() { command ksh -c "printf '%0.5f\n' \$((cos($*)))"; }
elif shlib.hascmd 'zsh'; then
	__shlib_math_cos_cmd() { command zsh -c "result=\$((cos($*)));printf '%0.5f\n' \${result%.}"; }
else
	shlib.error 'no suitable method for doing cos'
	return 1
fi

__shlib_math_cos()
{
	while test "$#" -gt '0'; do
		case "${1}" in
		(--)	shift; break;;
		(*)	break;;
		esac
	done

	if test "$#" -lt '1'; then
		shlib.usage 'math.cos' 'too few arguments'
		return 1
	fi

	if test "$#" -gt '1'; then
		shlib.usage 'math.cos' 'too many arguments'
		return 1
	fi

	__shlib_math_cos_cmd "${@}"
}
alias math.cos='__shlib_math_cos '

shlib.main {
	for arg; do
		case "${arg}" in (-h|-help|--help) shlib.doc 'math.cos';; esac
	done
	__shlib_math_cos "${@}"
}

shlib.test {
	test.fail 'empty argument list allowed' __shlib_math_cos
	test.fail 'too many arguments allowed' __shlib_math_cos 1 2
	test.exec __shlib_math_cos 1
	test.result 'math' '0.99239' __shlib_math_cos 0.12345
	test.benchmark __shlib_math_cos 1
	test.done
}

# vim: filetype=sh
