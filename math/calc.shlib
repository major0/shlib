#!/usr/bin/env shlib

if test "${SHLIB_SHELL}" = 'ksh'; then
	__shlib_math_calc_cmd() { set +e;set -- "$(($*))"; set -- "${1}" "$?";set -e;test "$2" -eq '0' || return 1;echo "${1}"; }
elif test "${SHLIB_SHELL}" = 'zsh'; then
	__shlib_math_calc_cmd() { set +e;set -- "$(($*))"; set -- "${1}" "$?";set -e;test "$?" -eq '0' || return 1;echo "${1%.}"; }
elif shlib.hascmd calc; then
	__shlib_math_calc_cmd() { command calc -p "$*"; }
elif shlib.hascmd bc; then
	__shlib_math_calc_cmd() { printf '%s\n' "$*" | bc; }
elif shlib.hascmd ksh; then
	__shlib_math_calc_cmd() { command ksh -c "echo \$(($*))"; }
elif shlib.hascmd zsh; then
	__shlib_math_calc_cmd() { command zsh -c "result=\$(($*));echo \${result%.}"; }
elif shlib.hascmd awk; then
	__shlib_math_calc_cmd() { command awk "BEGIN{ print $*; }"; }
else
	shlib.error 'no suitable method for doing math'
	return 1
fi

__shlib_math_calc()
{
	: "__shlib_math_calc($*)"
	while test "$#" -gt '0'; do
		case "${1}" in
		(--)	shift; break;;
		(*)	break;;
		esac
	done

	if test "$#" -eq '0'; then
		shlib.usage 'math.calc' 'too few arguments'
		return 1
	fi

	__shlib_math_calc_cmd "${@}"
}
alias math.calc='__shlib_math_calc '

shlib.main {
	for arg; do
		case "${arg}" in (-h|-help|--help) shlib.doc 'math.calc';; esac
	done
	__shlib_math_calc "${@}"
}

shlib.test {
	! __shlib_math_calc >/dev/null 2>&1 || die 'no arguments allowed'
	! __shlib_math_calc '1 2 3' >/dev/null 2>&1 || die 'accepted bad input'
	__shlib_math_calc '1' >/dev/null 2>&1 || die 'failed to execute'
	__shlib_math_calc '1 + 1' >/dev/null 2>&1 || die 'failed to execute'
	test "$(__shlib_math_calc '1 + 1')" = '2' || die 'addition error'
	test "$(__shlib_math_calc '2 - 1')" = '1' || die 'subtraction error'
	test "$(__shlib_math_calc '20 / 2')" = '10' || die 'divsion error'
	test "$(__shlib_math_calc '3 * 5')" = '15' || die 'multiplication error'

	shlib.benchmark __shlib_math_calc '12 * 12 + 11 / 3 - 1'

	shlib.test_pass
}

# vim: filetype=sh
